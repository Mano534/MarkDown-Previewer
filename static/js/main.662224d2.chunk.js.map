{"version":3,"sources":["components/editor.js","components/previewer.js","App.js","serviceWorker.js","store/reducers.js","store/store.js","index.js"],"names":["Editor","state","input","editor","previerw","handleChange","e","props","sendData","target","value","handleClick","setState","className","this","icon","faFreeCodeCamp","onClick","faTimes","faExpandAlt","defaultValue","onChange","id","React","Component","connect","textAreaValue","dispatch","data","type","Previewer","previewer","dangerouslySetInnerHTML","__html","marked","App","Boolean","window","location","hostname","match","initailState","closefirst","closesecond","reducers","action","store","createStore","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"iUASMA,G,kNACFC,MAAO,CACHC,MAAQ,GACRC,QAAS,EACTC,UAAW,G,EAEfC,aAAc,SAACC,GACX,EAAKC,MAAMC,SAASF,EAAEG,OAAOC,Q,EAEjCC,YAAc,WACV,EAAKC,SAAS,CACVT,QAAS,K,uDAKb,OACI,6BAASU,UAAWC,KAAKb,MAAME,OAAS,yBAA2B,UAC/D,yBAAKU,UAAU,aACX,yBAAKA,UAAU,aACX,yBAAKA,UAAU,aACX,yBAAKA,UAAU,gFACX,8BAAM,kBAAC,IAAD,CAAiBE,KAAMC,MAA7B,WACA,0BAAMC,QAASH,KAAKH,YAAaE,UAAU,QAAQC,KAAKb,MAAME,OAAS,kBAAC,IAAD,CAAiBY,KAAMG,MAAa,kBAAC,IAAD,CAAiBH,KAAMI,QAEtI,8BAAUT,MAAOI,KAAKP,MAAMa,aAAcC,SAAUP,KAAKT,aAAcQ,UAAU,0DAA0DS,GAAG,mB,GAzBrJC,IAAMC,YA+CZC,eAbE,SAACxB,GACd,MAAO,CACHmB,aAAenB,EAAMyB,kBAGN,SAACC,GACpB,MAAO,CACHnB,SAAW,SAACoB,GAAQD,EAAS,CAACE,KAAO,UAAYD,aAM1CH,CAAuCzB,G,iBC/ChD8B,E,4MACF7B,MAAO,CACHC,MAAQ,GACRC,QAAS,EACTC,UAAW,G,EAEfO,YAAc,WACV,EAAKC,SAAS,CACVmB,WAAY,K,uDAKhB,OACI,6BAASlB,UAAWC,KAAKb,MAAMG,SAAW,YAAc,UACpD,yBAAKS,UAAU,iFACX,uBAAGA,UAAU,WAAU,kBAAC,IAAD,CAAiBE,KAAMC,MAA9C,cACA,0BAAMC,QAASH,KAAKH,YAAaE,UAAU,QAAQC,KAAKb,MAAMG,SAAW,kBAAC,IAAD,CAAiBW,KAAMG,MAAa,kBAAC,IAAD,CAAiBH,KAAMI,QAExI,yBAAKG,GAAG,UAAUT,UAAU,yCAA0CmB,wBAAyB,CAACC,OAASC,IAAOpB,KAAKP,MAAMqB,KAAKF,uB,GAnBxHH,IAAMC,WAkCfC,eARE,SAACxB,GACd,MAAO,CACH2B,KAAO3B,KAMAwB,CAAoBK,GC7BpBK,MAVf,WAEE,OACE,yBAAKtB,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,QCGcuB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,YClBFC,EAAc,CACdC,YAAY,EACZC,aAAa,EACbjB,cAAa,ysCAmEFkB,EAfA,WAAgC,IAA/B3C,EAA8B,uDAAtBwC,EAAaI,EAAS,uCAC1C,OAAQA,EAAOhB,MACX,IAAK,UACD,OAAO,2BAAI5B,GAAX,IAAmByB,cAAgBmB,EAAOjB,OAE9C,QACI,OAAO3B,I,OC9CJ6C,EAFHC,YAAYH,GCJxBI,IAASC,OACP,kBAAC,IAAMC,WAAP,KACI,kBAAC,IAAD,CAAUJ,MAAOA,GACf,kBAAC,EAAD,QAGNK,SAASC,eAAe,SHoHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.662224d2.chunk.js","sourcesContent":["import React from 'react';\r\nimport { faExpandAlt } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { faTimes } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon }from \"@fortawesome/react-fontawesome\";\r\nimport { faFreeCodeCamp } from \"@fortawesome/free-brands-svg-icons\";\r\n\r\nimport { connect } from \"react-redux\";\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\n//fa-expand-alt\r\nclass Editor extends React.Component{\r\n    state ={ \r\n        input : '',\r\n        editor : true ,\r\n        previerw : true\r\n    }\r\n    handleChange =(e)=>{\r\n        this.props.sendData(e.target.value)\r\n    }\r\n    handleClick = ()=>{\r\n        this.setState({\r\n            editor : false \r\n            \r\n        })\r\n    }\r\n    render(){\r\n        return (\r\n            <section className={this.state.editor ? \"container my-3 special\" : \"d-none\"}>\r\n                <div className=\"container\">\r\n                    <div className=\"container\">\r\n                        <div className=\"container\">                            \r\n                            <div className=\"head  text-white w-100 bg-danger px-2 rounded justify-content-between d-flex\">\r\n                                <span><FontAwesomeIcon icon={faFreeCodeCamp}/> Editor</span>\r\n                                <span onClick={this.handleClick} className=\"icon\">{this.state.editor ? <FontAwesomeIcon icon={faTimes}/> : <FontAwesomeIcon icon={faExpandAlt}/>}</span>\r\n                            </div>\r\n                            <textarea value={this.props.defaultValue} onChange={this.handleChange} className=\"eidtor w-100  form-control  bg-my-red rounded min-vh-50\" id=\"editor\"></textarea>              \r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </section>\r\n        )\r\n    }\r\n} \r\n\r\nlet mapToState = (state)=>{\r\n    return {\r\n        defaultValue : state.textAreaValue\r\n    }\r\n} \r\nlet MapDispatchToProps=(dispatch)=>{\r\n    return { \r\n        sendData : (data)=>{dispatch({type : \"INPUTED\" , data})} \r\n}\r\n}\r\n\r\n\r\n\r\nexport default connect(mapToState,MapDispatchToProps)(Editor) ;\r\n","import React from 'react';\r\nimport { faTimes } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon }from \"@fortawesome/react-fontawesome\";\r\nimport { faFreeCodeCamp } from \"@fortawesome/free-brands-svg-icons\";\r\nimport { faExpandAlt } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { connect } from 'react-redux';\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport marked from 'marked';\r\n//fa-expand-alt\r\nclass Previewer extends React.Component{\r\n    state ={ \r\n        input : '',\r\n        editor : true ,\r\n        previerw : true\r\n    }\r\n    handleClick = ()=>{\r\n        this.setState({\r\n            previewer : false \r\n\r\n        })\r\n    }\r\n    render(){\r\n        return (\r\n            <section className={this.state.previerw ? \"container\" : \"d-none\"}>\r\n                <div className=\"p-0 px-2 m-0 head bg-danger text-white rounded d-flex justify-content-between\">\r\n                    <p className=\"p-0 m-0\"><FontAwesomeIcon icon={faFreeCodeCamp}/> Previewer</p>\r\n                    <span onClick={this.handleClick} className=\"icon\">{this.state.previerw ? <FontAwesomeIcon icon={faTimes}/> : <FontAwesomeIcon icon={faExpandAlt}/>}</span>\r\n                </div>\r\n                <div id=\"preview\" className=\"w-100 rounded py-4 pl-3 pr-5 bg-my-red\"  dangerouslySetInnerHTML={{__html : marked(this.props.data.textAreaValue)}}  />\r\n           </section>\r\n        )\r\n    }\r\n} \r\n\r\n\r\nlet mapToState = (state)=>{\r\n    return {\r\n        data : state\r\n    }\r\n}\r\n\r\n\r\n\r\nexport default connect(mapToState)(Previewer) ;","import React from 'react';\nimport './App.scss';\nimport Editor from './components/editor';\nimport Previewer from './components/previewer'\nfunction App() {\n\n  return (\n    <div className=\"App\">\n      <Editor/>\n      <Previewer/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","let initailState ={\r\n    closefirst: false ,\r\n    closesecond: false ,\r\n    textAreaValue : `\r\n# Welcome to my React Markdown Previewer!\r\n\r\n## This is a sub-heading...\r\n### And here's some other cool stuff:\r\n  \r\nHeres some code, \\`<div></div>\\` , between 2 backticks.\r\n...\r\n\\n\r\n// this is multi-line code : \r\n\r\nfunction anotherExample(firstLine, lastLine){\r\n    if(firstLine == '\\`\\`\\`' && lastLine == '\\`\\`\\`'){\r\n        return multiLineCode ;  \r\n    }\r\n    \\`\\`\\`\r\n\\n    \r\nYou can also make text **bold**... whoa!\r\nOr _italic_.\r\nOr... wait for it... **_both!_**\r\nAnd feel free to go crazy ~~crossing stuff out~~.\r\n\r\nThere's also [links](https://www.freecodecamp.com), and\r\n> Block Quotes!\r\n\r\nAnd if you want to get really crazy, even tables:\r\n\r\nWild Header | Crazy Header | Another Header?\r\n------------ | ------------- | ------------- \r\nYour content can | be here, and it | can be here....\r\nAnd here. | Okay. | I think we get it.\r\n\r\n- And of course there are lists.\r\n  - Some are bulleted.\r\n     - With different indentation levels.\r\n        - That look like this.\r\n\r\n\r\n1. And there are numbererd lists too.\r\n1. Use just 1s if you want! \r\n1. But the list goes on...\r\n- Even if you use dashes or asterisks.\r\n* And last but not least, let's not forget embedded images:\r\n\r\n![React Logo w/ Text](https://goo.gl/Umyytc)\r\n\r\n    `\r\n}\r\n\r\n\r\n\r\n\r\nlet reducers = (state = initailState,action)=>{\r\n    switch (action.type){\r\n        case 'INPUTED':\r\n            return {...state , textAreaValue : action.data} ; \r\n\r\n        default :\r\n            return state ; \r\n\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\nexport default reducers;","import reducers from \"./reducers\"\r\nimport { createStore } from 'redux'\r\n\r\n\r\n// if there is combine reducers\r\n\r\n\r\n\r\n\r\n// redux  store\r\n\r\n\r\n\r\nlet store = createStore(reducers) ;\r\n\r\nexport default store ; \r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css'\nimport { Provider } from 'react-redux'\nimport store from './store/store';\nimport { Fontawesome } from '@fortawesome/react-fontawesome'\nReactDOM.render(\n  <React.StrictMode>\n      <Provider store={store}>\n        <App />\n      </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}